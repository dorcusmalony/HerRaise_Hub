name: Frontend CI/CD Pipeline

on:
  push:
    branches: [develop, main]
  pull_request:
    # run CI for any PR so we can create preview deployments
    branches: [ main ]

permissions:
    contents: read
    packages: write
    id-token: write

env:
  APP_DIR: herconnect
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/herconnect-frontend
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-build-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install deps
        run: |
          cd ${{ env.APP_DIR }}
          npm ci

      - name: Lint (if configured)
        run: |
          cd ${{ env.APP_DIR }}
          npm run lint --if-present

      - name: Run unit tests
        run: |
          cd ${{ env.APP_DIR }}
          npm test --if-present

      - name: Dependency vulnerability scan (npm audit)
        id: npm-audit
        run: |
          cd ${{ env.APP_DIR }}
          npm audit --json > audit.json || true
          node -e "const a=require('./${{ env.APP_DIR }}/audit.json'); const v=a.metadata?.vulnerabilities||{}; if((v.critical||0)+(v.high||0)>0){ console.error('High/Critical vulnerabilities found'); process.exit(2); }"

      - name: Build production assets
        run: |
          cd ${{ env.APP_DIR }}
          npm run build

  container-build-and-scan:
    needs: build-and-test
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-container-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          cd ${{ env.APP_DIR }}
          docker build -t ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .
          docker push ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Scan image with Trivy (fail on HIGH/CRITICAL)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasecurity/trivy:latest image --format json -o trivy-report.json ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} || true
          HIGH=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="HIGH" or .Severity=="CRITICAL")] | length' trivy-report.json)
          echo "high_critical_vulns=$HIGH" >> $GITHUB_OUTPUT
          if [ "$HIGH" -gt 0 ]; then echo "High/Critical vulnerabilities found"; exit 2; fi

      - name: Upload Trivy report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.json

  vercel-deploy:
    needs: [build-and-test, container-build-and-scan]
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-vercel-${{ github.ref }}
      cancel-in-progress: true
    # run this job for production (main), staging (develop) and PR events (preview)
    if: |
      github.ref == 'refs/heads/main' ||
      github.ref == 'refs/heads/develop' ||
      github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4

      - name: Select Vercel project and deploy
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          zeit-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          # choose project id based on branch/event:
          # - main -> production project id (secret: VERCEL_PROJECT_ID_PROD)
          # - develop -> staging project id (secret: VERCEL_PROJECT_ID_STAGING)
          # - pull_request -> use staging project id to create preview deployments
          vercel-project-id: ${{ github.ref == 'refs/heads/main' && secrets.VERCEL_PROJECT_ID_PROD || github.ref == 'refs/heads/develop' && secrets.VERCEL_PROJECT_ID_STAGING || secrets.VERCEL_PROJECT_ID_STAGING }}
          # mark production deploy only when on main
          working-directory: ${{ env.APP_DIR }}
